# -*- coding: utf-8 -*-
"""PartA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WD3Fh4vOFHGoeKKtqMTrYQcy_TtO0oMM
"""

def print_onebanc_banner():
    """Print the OneBanc MPIN Task banner"""
    banner = """
 ██████╗ ███╗   ██╗███████╗██████╗  █████╗ ███╗   ██╗ ██████╗
██╔═══██╗████╗  ██║██╔════╝██╔══██╗██╔══██╗████╗  ██║██╔════╝
██║   ██║██╔██╗ ██║█████╗  ██████╔╝███████║██╔██╗ ██║██║
██║   ██║██║╚██╗██║██╔══╝  ██╔══██╗██╔══██║██║╚██╗██║██║
╚██████╔╝██║ ╚████║███████╗██████╔╝██║  ██║██║ ╚████║╚██████╗
 ╚═════╝ ╚═╝  ╚═══╝╚══════╝╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝

███╗   ███╗██████╗ ██╗███╗   ██╗    ██╗   ██╗ █████╗ ██╗     ██╗██████╗  █████╗ ████████╗ ██████╗ ██████╗
████╗ ████║██╔══██╗██║████╗  ██║    ██║   ██║██╔══██╗██║     ██║██╔══██╗██╔══██╗╚══██╔══╝██╔═══██╗██╔══██╗
██╔████╔██║██████╔╝██║██╔██╗ ██║    ██║   ██║███████║██║     ██║██║  ██║███████║   ██║   ██║   ██║██████╔╝
██║╚██╔╝██║██╔═══╝ ██║██║╚██╗██║    ╚██╗ ██╔╝██╔══██║██║     ██║██║  ██║██╔══██║   ██║   ██║   ██║██╔══██╗
██║ ╚═╝ ██║██║     ██║██║ ╚████║     ╚████╔╝ ██║  ██║███████╗██║██████╔╝██║  ██║   ██║   ╚██████╔╝██║  ██║
╚═╝     ╚═╝╚═╝     ╚═╝╚═╝  ╚═══╝      ╚═══╝  ╚═╝  ╚═╝╚══════╝╚═╝╚═════╝ ╚═╝  ╚═╝   ╚═╝    ╚═════╝ ╚═╝  ╚═╝
"""
    print(banner)

from typing import Dict, Union

class MPINValidator:
    """
    Class to validate if a 4-digit MPIN is weak or strong.
    Uses pattern recognition techniques without hardcoding specific values.
    """

    def __init__(self):
        """Initialize the MPIN validator"""
        pass

    def is_weak_mpin(self, mpin: str) -> bool:
        """
        Determine if the provided MPIN is weak based on pattern analysis.

        Args:
            mpin (str): A 4-digit MPIN

        Returns:
            bool: True if the MPIN is weak, False if strong
        """
        # Basic validation
        if not isinstance(mpin, str) or not mpin.isdigit() or len(mpin) != 4:
            raise ValueError("MPIN must be a 4-digit string")

        # Check for weakness patterns

        # 1. Check if all digits are the same (e.g., 1111)
        if len(set(mpin)) == 1:
            return True

        # 2. Check for sequential ascending/descending patterns
        is_sequential = True
        difference = int(mpin[1]) - int(mpin[0])
        for i in range(1, len(mpin) - 1):
            if int(mpin[i+1]) - int(mpin[i]) != difference:
                is_sequential = False
                break
        if is_sequential and abs(difference) == 1:
            return True

        # 3. Check for repeating patterns (e.g., 1212, 1122)
        if len(set(mpin)) <= 2:
            return True

        # 4. Check for palindromes (e.g., 1221)
        if mpin == mpin[::-1]:
            return True

        # 5. Check for common year patterns (e.g., 19xx, 20xx)
        if (mpin[0:2] == "19" or mpin[0:2] == "20") and int(mpin[2:]) < 100:
            return True

        # Not matching any weak pattern, consider it strong
        return False

    def check_mpin(self, mpin: str) -> Dict[str, Union[bool, str]]:
        """
        Check if the MPIN is weak and return result.

        Args:
            mpin (str): A 4-digit MPIN

        Returns:
            dict: Result containing strength status
        """
        is_weak = self.is_weak_mpin(mpin)

        result = {
            "mpin": mpin,
            "is_weak": is_weak,
            "strength": "WEAK" if is_weak else "STRONG"
        }

        return result


def main():
    """Test the MPIN validator with user input"""
    validator = MPINValidator()

    print("=" * 50)
    print("OneBanc MPIN Validator - Part A")
    print("Check if a 4-digit MPIN is weak or strong")
    print("=" * 50)

    while True:
        mpin = input("\nEnter a 4-digit MPIN to check (or 'q' to quit): ")

        if mpin.lower() == 'q':
            break

        try:
            result = validator.check_mpin(mpin)
            print(f"\nMPIN: {result['mpin']}")
            print(f"Strength: {result['strength']}")

            if result['is_weak']:
                print("This MPIN has a common pattern and could be easily guessed.")
            else:
                print("This MPIN does not follow common patterns.")

        except ValueError as e:
            print(f"Error: {e}")


if __name__ == "__main__":
    print_onebanc_banner()
    main()